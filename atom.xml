<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[译林]]></title>
  <subtitle><![CDATA[坚持，就是胜利]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://modernsick.github.io/"/>
  <updated>2014-08-15T20:35:36.036Z</updated>
  <id>http://modernsick.github.io/</id>
  
  <author>
    <name><![CDATA[Strong Walter]]></name>
    <email><![CDATA[strongwalter2014@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[网络服务监控101：识别不良部署]]></title>
    <link href="http://modernsick.github.io/2014-08-14-Web-Service-Monitor-101.html"/>
    <id>http://modernsick.github.io/2014-08-14-Web-Service-Monitor-101.html</id>
    <published>2014-08-15T05:15:20.000Z</published>
    <updated>2014-08-15T19:57:14.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.jobbole.com/members/strongme" target="_blank" rel="external">Strongme</a>翻译自<a href="http://apmblog.compuware.com/2014/05/28/web-service-monitoring-101-identifying-bad-deployments/" target="_blank" rel="external">Andreas Grabner </a> 来自<a href="http://www.jobbole.com/" target="_blank" rel="external">ImportNew</a>   </p>
<p>你是否曾经往服务器发布更新的时候想，“一切正常，如期运行！”然后你却必须一直处理用户的抱怨：为什么你们的系统总是报错？   </p>
<p><img src="http://apmblog.compuware.com/wp-content/uploads/2014/05/IRS_Server_Cartoon1-600x186.png">   </p>
<p>我们最近正在两个数据中心之间迁移一些系统服务，甚至把一些组件放到了公有云上面。一切准备就绪，系统监控也设置妥当，每个人几乎是 竖着拇指开始行动的。紧接着，系统操控面板持续的输出愉悦的绿色监控信息。不久一个同事就跟我抱怨说：他怎么都无法使用我们迁移过的服务中的一个（免费<a href="http://www.compuware.com/en_us/application-performance-management/products/ajax-free-edition/overview.html" target="_blank" rel="external">dynaTrace AJAX Edition</a>），好像是认证网络服务失败了。这时，我们就列出以下几个需要考虑的问题：  </p>
<ul>
<li>影响：这个问题是只有他的帐号出现还是影响了更多的用户？</li>
<li>根源问题：根源问题出现在哪？为什么会出现这样的问题？</li>
<li>预警：为什么我们的操作监控面包没有报出任何网络服务失败的信息？ <a id="more"></a>


</li>
</ul>
<p>后来验证发现是由于下面几个问题导致的：   </p>
<ul>
<li>由于一个过时的配置文件被部署上去了</li>
<li>这个问题指挥影响到那些被不同的后端服务处理的员工帐号</li>
<li>没有在操作监控面包提示失败信息是由于使用SOAP框架不论是成功还是失败的信息都会在消息体中返回HTTP 200，而这样就不会在任何网络服务器的日志文件中出现   </li>
</ul>
<p>这篇博客会给你介绍更多从这次偶然事件中总结出来的的诊断问题和最佳实践的灵感。这样就可以升级我们的技术实现以及产品监控。只有你监控到所有的系统组件以及部署任务结果的关联性，才可以很自信的在不终端业务应用的基础上完成服务部署。   </p>
<h2 id="失败的监控：当你的终端用户成了你系统的预警系统">失败的监控：当你的终端用户成了你系统的预警系统</h2>
<p>当我得知一个同时无法使用 dynaTrace AJAX Edition服务器分析一个特定网站的性能的时候，我先复制到 这个网站的地址去验证了问题是否存在。我用自己的安全证书也失败了，表明不是我那个同时本地机器的问题：<br><img src="http://apmblog.compuware.com/wp-content/uploads/2014/05/AJAXEditionError-600x220.png">   </p>
<p>我去问管理监控这些服务的操作团队，得到下面的回复：   </p>
<p>“我们没有在网络服务器上看到任何错误，同样在我们的验证服务里面也没有报告有任何可用性问题的错误。看下面这张我们监控面板的截图就知道了，全部是绿色的，没有问题。”   </p>
<p><img src="http://apmblog.compuware.com/wp-content/uploads/2014/05/IISHealthMonitoringDashboard-600x354.png">   </p>
<h2 id="光有网络服务器日志监控是不够的">光有网络服务器日志监控是不够的</h2>
<p>正如我最开始一段提到的那样，由于我们的SOAP框架总是在错误消息体中返回HTTP 200。这是一个很常见”最佳（或者是最坏）事件“，大家可以在<a href="https://github.com/savonrb/savon/issues/151" target="_blank" rel="external">Github讨论</a>里面去瞧一瞧。   </p>
<p>以这种方式引发的问题在传统的基于网络服务器日志的操作监控不会检测到这些“逻辑/业务”方面的问题。你肯定不想着用户都开始抱怨才去升级你的监控方式吧。那么到底该如何做呢？这些开发以及系统监控工作需要我们坐下来，如何才能监控到这些服务的调用？并且需要我们去跟业务负责任去了解下，我们需要针对业务预警到哪个级别。</p>
<p>如何才能确认你当前的监控方式是否奏效呢？开始仔细的分析用户报告的问题吧，虽然这样的话就是人工监控了。  然后跟工程师了解下是否用到了这里提到的有监控机制的框架。   </p>
<h2 id="不良部署：诊断技术问题">不良部署：诊断技术问题</h2>
<p>为了确认这个问题的根源，我取到了进行认证失败的调用请求路径，如下面截图所示。如果你的服务没有动态请求调用路径，那也应该有一些详细的应用跟踪日志可以查看吧。我发现用本地IP或者是我传入的用户名来进行的认证请求地址都 被轻易的截取到了。因为dynaTrace总是会把所有的端到端的事务都截取到，不管它是快的，慢的，失败的或者是成功的。我都坚信会被捕获到。你可以发现我确认这个问题的根源是多么容易，可是为什么网络服务器的日志系统就是获取不到这个日志信息呢。   </p>
<p><img src="http://apmblog.compuware.com/wp-content/uploads/2014/05/PurePathShowingExactRootCause-600x329.png"><br>连接问题：之前可以验证雇员帐号的LDAP服务器现在无法连接是由于我们最近的一次基础设置的变更导致的。   </p>
<p>查看上面的这张截图可以看出我们的网络服务器验证是如何实现的（当我给那些工程师展示的时候吓到他们了），请求进来的时候，会进行3层的内部服务调用：   </p>
<ul>
<li>1st Call。查看这个用户的Session是否依然是验证过的</li>
<li>2nd Call。否则就检测JIRA用户目录，看他是否包含在这些免费的用户帐号中   </li>
<li>3rd Call。如果在免费账户中都找不到，就会通过LDAP代理来检测合作伙伴的的活动目录（AD）看这个用户是否是一名雇员   </li>
</ul>
<p>第一个成功的网络服务调用结果就是成功的登录并且向Ajax Editoon返回正数结果。   </p>
<h2 id="根源问题：过时的文件被部署到服务器上">根源问题：过时的文件被部署到服务器上</h2>
<p>上面的路径截图中我们可以看到这个雇员帐号在第一二次认证请求中都失败了（意思就是我当前session无效并且也不是免费的客户帐号）。第三次，回去AD检测，因为跟LDAP代理的连接无法建立。这就 看起来是个技术问题导致身份验证的失败。我刚开始猜测是由于我们把一些服务从一个数据中心迁移到另一个导致的。当然，我只猜对了一部分。   </p>
<p>我也把请求路径截图给我们的系统架构师看了，他回复说：“等等，我们早就不应该去调用LDAP代理服务了啊，因为我们已经把所有的用户账户全部迁移到了JIRA了”，这下有意思了。只有在我们拥有完整的点对点的事务内部请求记录才可以发现这个问题啊。   </p>
<p>总之,由于我们迁移了服务加上一些过时的配置文件导致我们的认证服务运行起来像没有迁移过我们的用户一样。这就是为什么网络服务还是会去访问LDAP然后失败，因为LDAP代理早就失效了。   </p>
<h2 id="我们的开发者、操作人员等等可以学到什么">我们的开发者、操作人员等等可以学到什么</h2>
<p>正如我们的案例一样，所有的相关人员都能学到点什么：  </p>
<ul>
<li><p>开发人员：确认你使用的框架不仅仅可以提供你需要的功能性组件，也需要一个生产环境中的监控程序。意思就是要跟着标准实践走，要有错误报告系统。无论是网络服务还是其他框架，确认你给自己的工作选对了工具，同时还得想想其他需要测试监控你程序的人。   </p>
</li>
<li><p>系统架构师：持续的监控实时系统，确认它是在按照你设计的方式工作。当需要物理迁移或者是虚拟迁移的时候，要确认一切如期运行。是不是所有的配置文件都部署成功并且是最新的?每个服务是否还能互相调用？跟操作人员协同看下以来系统是否能够连接。   </p>
</li>
<li><p>操作人员：确保你理解了所有系统的以来项，一起一些配置元素。跟工程师咨询下如何监控是否成功的部署了，以及如何操作这个网络服务。光检测入口 是否就足够了？你是否需要去监控后端服务？是不是光监控网络服务日志就可以了还是需要扩展监控组件？  </p>
</li>
<li><p>业务人员：如果你的业务需要这些网络服务，确保你获取到了相关的监控这些服务的正常运行的面板，用户数据比如失败或者成功请求的数量。可能话，就分析下为什么请求会失败。例如：是不是用户输错了证书（这样你就知道怎么解决问题了）或者还有别的问题（这时候你就需要联系你的操作人员以及开发商）。   </p>
</li>
</ul>
<p>包括我们在内的许多组织尝试持续交付，但是代价太大了，而且总是会有自动部署捕捉不到的问题。开发人员和操作人员也需要持续的进步，这正是我们在努力的方向。我同时也希望分享别人的坑可以帮助你以后不掉进类似的坑。我们也很欢迎你能分享你的故事，跟大家分享下你在你的工作中是如何解决性能和部署问题的。</p>
]]></content>
    <summary type="html"><![CDATA[<p><a href="http://www.jobbole.com/members/strongme" target="_blank" rel="external">Strongme</a>翻译自<a href="http://apmblog.compuware.com/2014/05/28/web-service-monitoring-101-identifying-bad-deployments/" target="_blank" rel="external">Andreas Grabner </a> 来自<a href="http://www.jobbole.com/" target="_blank" rel="external">ImportNew</a>   </p>
<p>你是否曾经往服务器发布更新的时候想，“一切正常，如期运行！”然后你却必须一直处理用户的抱怨：为什么你们的系统总是报错？   </p>
<p><img src="http://apmblog.compuware.com/wp-content/uploads/2014/05/IRS_Server_Cartoon1-600x186.png">   </p>
<p>我们最近正在两个数据中心之间迁移一些系统服务，甚至把一些组件放到了公有云上面。一切准备就绪，系统监控也设置妥当，每个人几乎是 竖着拇指开始行动的。紧接着，系统操控面板持续的输出愉悦的绿色监控信息。不久一个同事就跟我抱怨说：他怎么都无法使用我们迁移过的服务中的一个（免费<a href="http://www.compuware.com/en_us/application-performance-management/products/ajax-free-edition/overview.html" target="_blank" rel="external">dynaTrace AJAX Edition</a>），好像是认证网络服务失败了。这时，我们就列出以下几个需要考虑的问题：  </p>
<ul>
<li>影响：这个问题是只有他的帐号出现还是影响了更多的用户？</li>
<li>根源问题：根源问题出现在哪？为什么会出现这样的问题？</li>
<li>预警：为什么我们的操作监控面包没有报出任何网络服务失败的信息？ ]]></summary>
    
      <category term="ImportNew" scheme="http://modernsick.github.io/tags/ImportNew/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/tags/Translation/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/categories/Translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Top10 - Java中关于String类型的10个问题]]></title>
    <link href="http://modernsick.github.io/2014-08-14-Java-String-Top10.html"/>
    <id>http://modernsick.github.io/2014-08-14-Java-String-Top10.html</id>
    <published>2014-08-15T04:15:20.000Z</published>
    <updated>2014-08-15T19:57:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-_如何比较两个字符串？用“=”还是equals">1. 如何比较两个字符串？用“=”还是equals</h2>
<p>简单来说，“==”是用来检测俩引用是不是指向内存中的同一个对象，而equals()方法则检测的是两个对象的值是否相等。只要你项检测俩字符串是不是相等的，你就必须得用equals()方法。   </p>
<p>如果你自己到“字符串保留(string intern)”的概念那就更好了。   </p>
<h2 id="2-_为什么安全敏感的字符串信息用char[]会比String对象更好？">2. 为什么安全敏感的字符串信息用char[]会比String对象更好？</h2>
<p>String对象是不可变的就意味着直到垃圾回收器过来清扫之前它们都不会发生变化的。用数组的话，就可以很明确的修改它任何位置的字符元素。这样的话，如密码等安全敏感的信息就不会出现在系统的任何地方。<br><a id="more"></a></p>
<h2 id="3-_字符串对象能否用在switch表达式中？">3. 字符串对象能否用在switch表达式中？</h2>
<p>从JDK7开始的话，我们就可以在switch条件表达式中使用字符串了，也就是说7之前的版本是不可以的。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java 7 only!</span></div><div class="line"><span class="keyword">switch</span> (str.toLowerCase()) {</div><div class="line">      <span class="keyword">case</span> <span class="string">"a"</span>:</div><div class="line">           value = <span class="number">1</span>;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">"b"</span>:</div><div class="line">           value = <span class="number">2</span>;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">}</div></pre></td></tr></table></figure>





<h2 id="4-_如何将字符串转换为整型数值？">4. 如何将字符串转换为整型数值？</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n = Integer.parseInt(<span class="string">"10"</span>);</div></pre></td></tr></table></figure>



<p>如此简单，经常使用有偶尔也会被遗忘。   </p>
<h2 id="5-_如何用空格去分隔字符串？">5. 如何用空格去分隔字符串？</h2>
<p>我们可以很便捷的使用正则表达式来进行分隔。“\s”就表示空格，还有如””,”\t”,”\r”,”\n”.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String[] strArray = aString.split(<span class="string">"\\s+"</span>);</div></pre></td></tr></table></figure>



<h2 id="6-_substring()方法具体是都干了些啥？">6. substring()方法具体是都干了些啥？</h2>
<p>在JDK6中，这个方法只会在标识现有字符串的字符数组上 给一个窗口来表示结果字符串，但是不会创建一个新的字符串对象。如果需要创建个新字符串对象，可以这样在结果后面+一个空的字符串：   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.substring(m, n) + <span class="string">""</span></div></pre></td></tr></table></figure>



<p>这么写的话就会创建一个新的字符数组来表示结果字符串。同时，这么写也有一定的几率让你的代码跑的更快，因为垃圾回收器会吧没有在使用的大字符串回收而留下子字符串。   </p>
<p>Oracle JDK7中的substring()方法会创建一个新的字符数组，而不用之前存在的。看看<a href="http://www.programcreek.com/2013/09/the-substring-method-in-jdk-6-and-jdk-7/" target="_blank" rel="external">这张图</a>就会明白substring()方法在JDK6和JDK7中的区别。     </p>
<h2 id="7-_String&amp;StringBuilder&amp;StringBuffer">7. String&amp;StringBuilder&amp;StringBuffer</h2>
<p>String vs StringBuilder:StringBuilder是可变的，这就意味你在创建对象之后还可以去修改它的值。StringBuilder vs StringBuffer:StringBuffer是同步的，意味着它是线程安全的，但是就会比StringBuilder慢些。   </p>
<h2 id="8-_如何快速重复构造一段字符串？">8. 如何快速重复构造一段字符串？</h2>
<p>在Python编程中，只需要用字符串去乘以一个数字就可以 搞定了，那在Java编程中，我们可以使用来自Apache Commons Lang包中的StringUtils类的repeat()方法。   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"abcd"</span>;</div><div class="line">String repeated = StringUtils.repeat(str,<span class="number">3</span>);</div><div class="line"><span class="comment">//abcdabcdabcd</span></div></pre></td></tr></table></figure>



<h2 id="9-_如何将时间格式的字符串转换成date对象？">9. 如何将时间格式的字符串转换成date对象？</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"Sep 17, 2013"</span>;</div><div class="line">Date date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"MMMM d, yy"</span>, Locale.ENGLISH).parse(str);</div><div class="line">System.out.println(date);</div><div class="line"><span class="comment">//Tue Sep 17 00:00:00 EDT 2013</span></div></pre></td></tr></table></figure>



<h2 id="10-_如何计数一个字符在某个字符串中出现的次数？">10. 如何计数一个字符在某个字符串中出现的次数？</h2>
<p>使用Apache Commons Lang包中的 StringUtils类就可以完成这个工作。   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n = StringUtils.countMatches(<span class="string">"11112222"</span>, <span class="string">"1"</span>);</div><div class="line">System.out.println(n);</div></pre></td></tr></table></figure>



<h2 id="对，还有一个">对，还有一个</h2>
<p><a href="http://www.programcreek.com/2011/04/a-method-to-detect-if-string-contains-1-uppercase-letter-in-java/" target="_blank" rel="external">你知道如何检测一个字符串只包含大写字母呢？</a>   </p>
<p><a href="http://www.programcreek.com/2013/09/top-10-faqs-of-java-strings/" target="_blank" rel="external">外文连接：Top 10 questions of Java Strings</a>   </p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="1-_如何比较两个字符串？用“=”还是equals">1. 如何比较两个字符串？用“=”还是equals</h2>
<p>简单来说，“==”是用来检测俩引用是不是指向内存中的同一个对象，而equals()方法则检测的是两个对象的值是否相等。只要你项检测俩字符串是不是相等的，你就必须得用equals()方法。   </p>
<p>如果你自己到“字符串保留(string intern)”的概念那就更好了。   </p>
<h2 id="2-_为什么安全敏感的字符串信息用char[]会比String对象更好？">2. 为什么安全敏感的字符串信息用char[]会比String对象更好？</h2>
<p>String对象是不可变的就意味着直到垃圾回收器过来清扫之前它们都不会发生变化的。用数组的话，就可以很明确的修改它任何位置的字符元素。这样的话，如密码等安全敏感的信息就不会出现在系统的任何地方。<br>]]></summary>
    
      <category term="Java" scheme="http://modernsick.github.io/tags/Java/"/>
    
      <category term="Java-Basics" scheme="http://modernsick.github.io/tags/Java-Basics/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/tags/Translation/"/>
    
      <category term="String" scheme="http://modernsick.github.io/tags/String/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/categories/Translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IT生涯：参与开源将为你的简历画上漂亮的一笔]]></title>
    <link href="http://modernsick.github.io/2014-08-13-OpenSource-OpenResume.html"/>
    <id>http://modernsick.github.io/2014-08-13-OpenSource-OpenResume.html</id>
    <published>2014-08-14T05:46:04.000Z</published>
    <updated>2014-08-15T19:56:55.000Z</updated>
    <content type="html"><![CDATA[<p><strong>先别急着把你的纸版简历丢进垃圾桶，但是那些为开源项目做过贡献的开发者们会发现他们的代码将是他们事业飞黄腾达最好的工具。</strong>   </p>
<p>来来先上一个IT式的幽默：你管一个刚刚把他/她的第六个补丁贡献给Linux内核的志愿者叫什么？   </p>
<p><em>I WANT YOU</em>   </p>
<p>知道笑点在哪不？来来请允许我们的Linux基金会的伙计来解释一下：”这个‘笑话’的意思是一个Linux外行是不会贡献超过5个补丁给内核的，因为一旦他贡献超过5个，那他就将得到一份工作了。它其实不是一个笑话，我已经看到这样的事情发生过无数次了。“   </p>
<p>这很可能是被那些实实在在参与开源项目或者组织的IT专业人士最容易忽视的一个好处之一：虽然开源的核心是合作与平民化，但是对于自我利益的提升也是非常有帮助的。尤其是对于开发者来，他们可以将他们的无偿开源工作转变为比传统简历或者猎头工具更具力量的专业头衔。<br><a id="more"></a></p>
<p>Bikas Saha ，是一名Hortonworks的技术工作人员，同时他也积极的参与到 Apache Software  Foundation ,那里有包括Hadoop以及其他开源项目平台。他认为，在参与开源项目中的相关代码以及社区名望越来越变的和LinkedIn或者其他标准简历中的个人信息同等重要。   </p>
<p>“大家都能看到你所做的贡献。”他在一次专访中说，“我们能够清楚的看到你都做了些什么，以及你做的这些工作的质量如何。”   </p>
<p>他倒是没有说现在开源简历的概念可以去同时取代传统简历或者是LinkedIn资料了。当然，在Hortonworks，之前没有参与开源项目不会影响到待录用者的地位。Saha他自己在2011年从微软离职加入Hortonworks之前也还没有参与到Apache的开源项目中去。但是强烈的开源项目贡献可以代表你的事业，即时你暂时还不想去找一份工作，参与开源项目的这段时间也是你去找工作的最佳时期。   </p>
<p>Kroah-Hartman，已经帮助一些项IBM、Novell一样的公司招募了许多拥有Linux内核技术的开发人员（这家公司在2004年获得了Linux企业发行版版权）。事实告诉我们在邮件面试中你对开源项目所做的贡献对于向招聘人员或者是人事展示你的优势是相当有利的。   </p>
<p><img src="http://img.deusm.com/informationweek/2014/08/1297734/woman-shaking-hands1.jpg">   </p>
<p>“研究表明，一个人要想在一个开发团队中和谐工作，那么他需要有良好的交流技能和扎实的技术，同时他得聪明并且得是一个容易相处的人。”，Kroah-Hartman 说，“我曾经帮助招募的大部分人都没有一份那么官方的简历，我们只对他所参与的开业工作，并且他的这项工作也很清晰的展示了他所拥有的技能”。   </p>
<p>Saha说Apache的自然的精英管理体制就很好的解释了开源简历的概念。跟传统的简历不同，开源简历你很难有机会去粉饰你过去的经历或者成就，正如开源简历这个概念的定义一样，对于你的能力大家是有目共睹的。Apache的贡献者们通常都会在他们的同僚之间积攒敬意与声望，例如，可以通过所参与的Apache开源项目的提交数量来选出更加有声望名誉的人。   </p>
<p>在通向开源精英的路上没有捷径可走：“要想成为一名开源代码提交人员不仅仅是去提交一些不定，还需要去帮助开发人员以及处理用户问题列表，参与文档制作，问题追踪，总之要让大家看得出来你有经久不衰的兴趣。”Apache网站上这么说的。   </p>
<p>同行审查声望机制加上开源贡献，一起组成了开源简历，据Saha说，这两者加起来所展示出来的信息，甚至比面对面说的任何事情都影响大的多。   </p>
<p>“开源简历有时候会比花三四个小时去面试更加的重要，”他说，“面试所反应出的这个人的信息，并不会像开源简历那么准确，看他们的开源背景或者是通过开源社交网络来分析出他作为一个工程师或者是潜在的受聘者所处的位置或者是什么样的水平。”   </p>
<p>这里所说的”社交网络”，他是指通常会围绕某个开源项目活跃起来的在线社区，特别是热门的项目，像Hadoop、或者是Linux内核。Kroah-Hartman指出，雇主很容易就可以看出那些在项目中活跃的人：”只需要去查阅一下邮件列表或者是源代码树就可以了，它们慢慢的都是参与这个项目的人的名字和邮件地址。“   </p>
<p>对于开源简历确实有一个社会化工具，Kroah-Hartman 说对于Linux开发人员来说最高效的获取工作机会的办法是告诉你的同僚，你在放生区等待被招安。“让其他开发人员知道你正在凭着现在所拥有的技术找工作或者正在考虑换一份工作”，他说，“如果我认识一些在内核开发的X或者Y领域有开发经验的并且在找工作的开发人员，每周就会有公司来求贤纳智”。   </p>
<p>在Apache的世界里面，Saha说，关系网和声望相当的有用，由于Hadoop以及一些相关的大数据以及分布式计算的技术还相对的不成熟。“实际上它是一个相当复杂的引擎平台”，他说：“要找到一个刚入门就可以很顺利的畅游在这个世界。不仅仅是因为软件或者代码的复杂性，同时还得有思想想法，许多人可以写软件却没有分布式软件的直觉或者经历。”   </p>
<p>尽管Saha说招聘方面的蓝图在最近几年有了很大的进步，但猎头依然在寻找在Hadoop生态系统方面有正真技术的人，理解开源简历潜在正能量的人。   </p>
<p>最后，在人才市场上，重大的开源贡献也是相当重要的。   </p>
<p>“如果你在参与开源工作的开发，那么将会有公司正在寻找并雇佣你。”Kroah-Hartman说。   </p>
<p><a href="http://www.informationweek.com/strategic-cio/team-building-and-staffing/it-careers-open-source-open-resume/d/d-id/1297734" target="_blank" rel="external">外文链接:IT Careers: Open Source, Open Resume</a></p>
]]></content>
    <summary type="html"><![CDATA[<p><strong>先别急着把你的纸版简历丢进垃圾桶，但是那些为开源项目做过贡献的开发者们会发现他们的代码将是他们事业飞黄腾达最好的工具。</strong>   </p>
<p>来来先上一个IT式的幽默：你管一个刚刚把他/她的第六个补丁贡献给Linux内核的志愿者叫什么？   </p>
<p><em>I WANT YOU</em>   </p>
<p>知道笑点在哪不？来来请允许我们的Linux基金会的伙计来解释一下：”这个‘笑话’的意思是一个Linux外行是不会贡献超过5个补丁给内核的，因为一旦他贡献超过5个，那他就将得到一份工作了。它其实不是一个笑话，我已经看到这样的事情发生过无数次了。“   </p>
<p>这很可能是被那些实实在在参与开源项目或者组织的IT专业人士最容易忽视的一个好处之一：虽然开源的核心是合作与平民化，但是对于自我利益的提升也是非常有帮助的。尤其是对于开发者来，他们可以将他们的无偿开源工作转变为比传统简历或者猎头工具更具力量的专业头衔。<br>]]></summary>
    
      <category term="Opensource" scheme="http://modernsick.github.io/tags/Opensource/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/tags/Translation/"/>
    
      <category term="CSDN CODE" scheme="http://modernsick.github.io/tags/CSDN-CODE/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/categories/Translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java中的String对象是“引用”传递的]]></title>
    <link href="http://modernsick.github.io/2014-08-12-String-Passby-Reference.html"/>
    <id>http://modernsick.github.io/2014-08-12-String-Passby-Reference.html</id>
    <published>2014-08-13T05:30:40.000Z</published>
    <updated>2014-08-15T19:56:46.000Z</updated>
    <content type="html"><![CDATA[<p>这个问题在Java的开发过程中是个很经典的问题。在Stackoverflow上也出现过许多相似的问题，同时里面也充斥这许多不正确或者是不完整的答案。如果你不去想太深入的话，其实这个问题还是挺简单的。但是你稍微的深深一琢磨，它就会把你给搞糊涂了。   </p>
<h2 id="1-_一段有趣&amp;迷糊人的代码">1. 一段有趣&amp;迷糊人的代码</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">	String x = <span class="keyword">new</span> String(<span class="string">"ab"</span>);</div><div class="line">	change(x);</div><div class="line">	System.out.println(x);</div><div class="line">}</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span>(String x) {</div><div class="line">	x = <span class="string">"cd"</span>;</div><div class="line">}</div></pre></td></tr></table></figure>



<p>打印结果是“ab”<br><a id="more"></a><br>在C++编程中，是这样的：   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> change(string &x) {</div><div class="line">    x = <span class="string">"cd"</span>;</div><div class="line">}</div><div class="line"> </div><div class="line"><span class="keyword">int</span> main(){</div><div class="line">    string x = <span class="string">"ab"</span>;</div><div class="line">    change(x);</div><div class="line">    cout &lt;&lt; x &lt;&lt; endl;</div><div class="line">}</div></pre></td></tr></table></figure>



<p>打印结果是“cd”   </p>
<a id="more"></a>

<h2 id="2-_常见的迷惑问题">2. 常见的迷惑问题</h2>
<p>x变量存储的是指向内存堆中“ab”字符串对象的引用，当x作为变量传递给change()方法时，它仍然是指向内存中“ab”这个字符串的：   </p>
<p><img src="http://www.programcreek.com/wp-content/uploads/2013/09/string-pass-by-reference--650x247.jpeg">   </p>
<p>因为Java是值传递的，x的值就是一个指向“ab”字符串的引用。当触发change()方法的时候，它就会新创建一个“cd”字符串，然后x引用就会如下图一样指向新的String对象：   </p>
<p><img src="http://www.programcreek.com/wp-content/uploads/2013/09/string-pass-by-reference-2-650x247.jpeg">     </p>
<p>看图图说话，貌似是个很有说服性的图解，我们非常清楚Java的时间是值传递的，那这里到底发生什么了呢？   </p>
<h2 id="3-_一开始的那段代码究竟做了什么？">3. 一开始的那段代码究竟做了什么？</h2>
<p>上面的图解实际上有几个错误。要理解起来也是相当容易的，完整的走一边处理过程是个好主意。   </p>
<p>当字符串对象“ab”被创建的时候，Java便会请求分配相应大小内存来存储这个字符串对象。然后这个对象就被赋值给了x变量，实际上x得到的值只是一个指向“ab”字符串的引用，这个引用便是字符串在内存中的地址。   </p>
<p>x变量存储着一个 指向字符串对象的引用，x变量本身却不是一个引用，它仅仅是个存储着引用（内存地址）的变量。   </p>
<p>铭记，Java永远是值传递的。当x变量被传递给change()方法时候，实际传递的是x变量的一个拷贝，change()方法里面创建的“cd”字符串有另外的引用地址，<strong> 这里仅仅是将x变量的引用指向了另外一个字符串的引用，而不是把之前的那个引用指向了另外一个对象！</strong>   </p>
<p>下面这张图解密到底发生了什么：   </p>
<p><img src="http://www.programcreek.com/wp-content/uploads/2013/09/string-pass-by-reference-3-650x244.jpeg">   </p>
<h2 id="4-_错误的解释">4.  错误的解释</h2>
<p>文头第一段代码所引发的问题跟String类型的不可变性没有任何关系。即时是把String对象替换成StringBuilder也是一样的结果。这里问题的关键是：变量不是引用，它仅仅是存储着引用。（The key point is that variable stores the reference, but is not the reference itself!这句原文有点绕，也不知道理解对没，请大神们指教）   </p>
<h2 id="5-_问题解决办法">5. 问题解决办法</h2>
<p>如果你必须得改变一个对象的值，首先这个对象得是可变的，像StringBuilder。其次，得确保没有新new的对象出现赋值给参数变量，记住Java是值传递的。   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">	StringBuilder x = <span class="keyword">new</span> StringBuilder(<span class="string">"ab"</span>);</div><div class="line">	change(x);</div><div class="line">	System.out.println(x);</div><div class="line">}</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span>(StringBuilder x) {</div><div class="line">	x.delete(<span class="number">0</span>, <span class="number">2</span>).append(<span class="string">"cd"</span>);</div><div class="line">}</div></pre></td></tr></table></figure>



<p><a href="http://www.programcreek.com/2013/09/string-is-passed-by-reference-in-java/" target="_blank" rel="external">外文连接：String is passed by “reference” in Java</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>这个问题在Java的开发过程中是个很经典的问题。在Stackoverflow上也出现过许多相似的问题，同时里面也充斥这许多不正确或者是不完整的答案。如果你不去想太深入的话，其实这个问题还是挺简单的。但是你稍微的深深一琢磨，它就会把你给搞糊涂了。   </p>
<h2 id="1-_一段有趣&amp;迷糊人的代码">1. 一段有趣&amp;迷糊人的代码</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">	String x = <span class="keyword">new</span> String(<span class="string">"ab"</span>);</div><div class="line">	change(x);</div><div class="line">	System.out.println(x);</div><div class="line">}</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span>(String x) {</div><div class="line">	x = <span class="string">"cd"</span>;</div><div class="line">}</div></pre></td></tr></table></figure>



<p>打印结果是“ab”<br><!--more--><br>在C++编程中，是这样的：   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> change(string &x) {</div><div class="line">    x = <span class="string">"cd"</span>;</div><div class="line">}</div><div class="line"> </div><div class="line"><span class="keyword">int</span> main(){</div><div class="line">    string x = <span class="string">"ab"</span>;</div><div class="line">    change(x);</div><div class="line">    cout &lt;&lt; x &lt;&lt; endl;</div><div class="line">}</div></pre></td></tr></table></figure>



<p>打印结果是“cd”   </p>
]]></summary>
    
      <category term="Java" scheme="http://modernsick.github.io/tags/Java/"/>
    
      <category term="Java-Basics" scheme="http://modernsick.github.io/tags/Java-Basics/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/tags/Translation/"/>
    
      <category term="String" scheme="http://modernsick.github.io/tags/String/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/categories/Translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java中的String对象为什么是不可变的]]></title>
    <link href="http://modernsick.github.io/2014-08-11-Why-JavaString-Immutability.html"/>
    <id>http://modernsick.github.io/2014-08-11-Why-JavaString-Immutability.html</id>
    <published>2014-08-11T14:00:40.000Z</published>
    <updated>2014-08-15T19:56:39.000Z</updated>
    <content type="html"><![CDATA[<p>String类型在Java中是不可变类型。不可变类型简单的理解就是它实例化之后的对象是不可修改的。所有的信息在这个对象创建的时候就被初始化好了，并且是不可以修改的。类的不可变性还是有许多的优点的。这篇文章咱就来唠嗑唠嗑为什么Java中的String类型被设计成了不可变的。对于这个问题完美的解释还得靠对存、同步、数据结构等的深刻认识。   </p>
<h2 id="1-_对字符串池的需求">1. 对字符串池的需求</h2>
<p>字符串池（字符串保留池）是方法区中的一个特殊存储区域。当一个字符串被创建并且这个字符串在字符串池中存在时，当前存在的字符串引用就会被返回并指向它，否则的话，就创建一个新的String对象并且返回它的引用。   </p>
<p>下面的这段示例代码只会在堆内存中创建一个String对象。   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String string1 = <span class="string">"abcd"</span>;</div><div class="line">String string2 = <span class="string">"abcd"</span>;</div></pre></td></tr></table></figure>



<p>在内存中是这个样子的：   </p>
<p><img src="http://www.programcreek.com/wp-content/uploads/2013/07/java-string-pool.jpeg">    </p>
<p>那咱假如String类型是可变的，那么通过其中一个引用来改变它所指向的String对象，将会导致另一个指向这个String对象的引用指向错误的字符串对象。   </p>
<p><a id="more"></a></p>
<h2 id="2-_缓存哈希码">2. 缓存哈希码</h2>
<p>在Java中，字符串的哈希值是经常使用的。例如，在HashMap中就用到了字符串的哈希值。String类型的不可变性，保证了每次对于同样的字符串获取到的哈希值都是相同的，所以咱就可以对哈希值进行缓存而不必去担心下次得到另外不一样的值。同时也意味着不需要每次需要使用哈希值的时候再去计算它，使用缓存起来的更加高效。   </p>
<p>在String的源码中，有这么一小片代码：   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash;<span class="comment">//this is used to cache hash code .</span></div></pre></td></tr></table></figure>



<h2 id="3-_方便了其他对象的使用">3. 方便了其他对象的使用</h2>
<p>为了容易理解一点，咱看下面这个程序：   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">set.add(<span class="keyword">new</span> String(<span class="string">"a"</span>));</div><div class="line">set.add(<span class="keyword">new</span> String(<span class="string">"b"</span>));</div><div class="line">set.add(<span class="keyword">new</span> String(<span class="string">"c"</span>));</div><div class="line"></div><div class="line"><span class="keyword">for</span>(String a : set) {</div><div class="line">	a.value = <span class="string">"a"</span>;</div><div class="line">}</div></pre></td></tr></table></figure>



<p>在上面这个例子中，如果Stirng对象是可变的，那么HashSet中的值是可变的这个现象就是违背了Set类型设计的原则（Set存储非重复值）。这个例子只是为了演示，在真正的使用中，Set中的元素是没有value这个属性的。   </p>
<h2 id="4-_安全性">4. 安全性</h2>
<p>String对象在Java的许多类型中被当作参数来传递使用，例如：网络连接、文件操作等等。如果String是可变的，连接或者文件就 会改变，最后可能 导致非常严重的威胁。尽管这其中的方法不只在一台机器上调用。可变的字符串类型同意会在反射中产生安全问题，因为它使用的参数也是字符串类型的。   </p>
<p>下面是一段示例代码：   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> connect(string s){</div><div class="line">    <span class="keyword">if</span> (!isSecure(s)) { </div><div class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(); </div><div class="line">    }</div><div class="line"><span class="comment">//here will cause problem, if s is changed before this by using other references.    </span></div><div class="line">    causeProblem(s);</div><div class="line">}</div></pre></td></tr></table></figure>



<h2 id="5-_对象的不可变性造就了天然的线程安全性">5. 对象的不可变性造就了天然的线程安全性</h2>
<p>由于对象的不可变性，使得它可以在不同的线程之间自由的进行共享操作，这就终结了必须使用同步锁的必要性。   </p>
<h2 id="总结">总结</h2>
<p>咳咳，该总结总结了，将String设计成不可变的初衷是为了效率和安全。这就解释了为什么在一般使用过程中不可变对象更加受欢迎。   </p>
<p><a href="http://www.programcreek.com/2013/04/why-string-is-immutable-in-java/" target="_blank" rel="external">外文连接：Why String is immutable in Java ?</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>String类型在Java中是不可变类型。不可变类型简单的理解就是它实例化之后的对象是不可修改的。所有的信息在这个对象创建的时候就被初始化好了，并且是不可以修改的。类的不可变性还是有许多的优点的。这篇文章咱就来唠嗑唠嗑为什么Java中的String类型被设计成了不可变的。对于这个问题完美的解释还得靠对存、同步、数据结构等的深刻认识。   </p>
<h2 id="1-_对字符串池的需求">1. 对字符串池的需求</h2>
<p>字符串池（字符串保留池）是方法区中的一个特殊存储区域。当一个字符串被创建并且这个字符串在字符串池中存在时，当前存在的字符串引用就会被返回并指向它，否则的话，就创建一个新的String对象并且返回它的引用。   </p>
<p>下面的这段示例代码只会在堆内存中创建一个String对象。   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String string1 = <span class="string">"abcd"</span>;</div><div class="line">String string2 = <span class="string">"abcd"</span>;</div></pre></td></tr></table></figure>



<p>在内存中是这个样子的：   </p>
<p><img src="http://www.programcreek.com/wp-content/uploads/2013/07/java-string-pool.jpeg">    </p>
<p>那咱假如String类型是可变的，那么通过其中一个引用来改变它所指向的String对象，将会导致另一个指向这个String对象的引用指向错误的字符串对象。   </p>
<p>]]></summary>
    
      <category term="Java" scheme="http://modernsick.github.io/tags/Java/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/tags/Translation/"/>
    
      <category term="String" scheme="http://modernsick.github.io/tags/String/"/>
    
      <category term="Java-Basics" scheme="http://modernsick.github.io/tags/Java-Basics/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/categories/Translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[图表展示Java中String类型的不可变性]]></title>
    <link href="http://modernsick.github.io/2014-08-11-Java-String-Immutability.html"/>
    <id>http://modernsick.github.io/2014-08-11-Java-String-Immutability.html</id>
    <published>2014-08-11T13:15:20.000Z</published>
    <updated>2014-08-15T19:56:26.000Z</updated>
    <content type="html"><![CDATA[<p>来先看下面的一组图演示Java中String类型的不可变性。   </p>
<h2 id="1-_声明一个字符串对象">1. 声明一个字符串对象</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String s = <span class="string">"abcd"</span>;</div></pre></td></tr></table></figure>

<p>这个变量s存储的是这个String对象的引用。下面图中的箭头应该被解释成“存着谁谁谁的引用”。   </p>
<p><img src="http://www.programcreek.com/wp-content/uploads/2009/02/String-Immutability-1.jpeg">   </p>
<p><a id="more"></a></p>
<h2 id="2-_将先前创建的那个s_String对象赋值给另一个变量s2">2. 将先前创建的那个s String对象赋值给另一个变量s2</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String s2 = s;</div></pre></td></tr></table></figure>

<p>s2存着跟s一样的引用，因此是指向一样的String对象。   </p>
<p><img src="http://www.programcreek.com/wp-content/uploads/2009/02/String-Immutability-2.jpeg">     </p>
<h2 id="3-_字符串连接">3. 字符串连接</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s = s.concat(<span class="string">"ref"</span>);</div></pre></td></tr></table></figure>



<p>引用s现在存储着新创建的String对象的引用。   </p>
<p><img src="http://www.programcreek.com/wp-content/uploads/2009/02/string-immutability-650x279.jpeg">    </p>
<h2 id="总结">总结</h2>
<p>一旦一个Java 的String对象在内存（堆）中创建，就不可能再发生变化了。大家应该注意到String的所有方法都不会改变这个String对象本身，而是返回一个新的String对象。   </p>
<p>如果需要一个可以修改的字符串，可以用StringBuilder或者是StringBuffer来实现。否则每次都创建一个String对象的话，程序运行的时候就会有大把大把的时间浪费在垃圾回收上面。<a href="http://www.programcreek.com/2011/11/java-convert-a-file-into-a-string/" target="_blank" rel="external">这</a>有 个例子示范如何使用StringBuilder的，有需要的可以去看看。</p>
<p><a href="http://www.programcreek.com/2009/02/diagram-to-show-java-strings-immutability/" target="_blank" rel="external">外文链接:Diagram to show Java String’s Immutability</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>来先看下面的一组图演示Java中String类型的不可变性。   </p>
<h2 id="1-_声明一个字符串对象">1. 声明一个字符串对象</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String s = <span class="string">"abcd"</span>;</div></pre></td></tr></table></figure>

<p>这个变量s存储的是这个String对象的引用。下面图中的箭头应该被解释成“存着谁谁谁的引用”。   </p>
<p><img src="http://www.programcreek.com/wp-content/uploads/2009/02/String-Immutability-1.jpeg">   </p>
<p>]]></summary>
    
      <category term="Java" scheme="http://modernsick.github.io/tags/Java/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/tags/Translation/"/>
    
      <category term="String" scheme="http://modernsick.github.io/tags/String/"/>
    
      <category term="Java-Basics" scheme="http://modernsick.github.io/tags/Java-Basics/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/categories/Translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Thanks to Andres Loew for Texture Packer License]]></title>
    <link href="http://modernsick.github.io/2014-07-30-Thanks-To-Texture-Loew.html"/>
    <id>http://modernsick.github.io/2014-07-30-Thanks-To-Texture-Loew.html</id>
    <published>2014-07-30T17:05:39.000Z</published>
    <updated>2014-08-15T19:56:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Thanks_goes_first_here-">Thanks goes first here.</h3>
<p>终于申请到了TexturePacker的license，虽然中间有点曲折，但是还是被热心的Andres Loew或者是他的同事们解决了，第二天很快就收到了LICENSE。<br>虽然才接触这类技术，但是作为一个CODER时常对新事物保持好奇心是相当有趣的。一起窥探动态的世界吧 哈哈</p>
<p><img src="/img/te/Pixel Guy Juggling.png" alt="Pixel Guy"><br>  <a id="more"></a></p>
<h2 id="Introduction_to_TexturePacker_and_PhysicsEditor">Introduction to TexturePacker and PhysicsEditor</h2>
<pre><code><span class="constant">PS</span><span class="symbol">:OK</span>, <span class="constant">Just</span> picture things, but they are knowledgable enough!   
</code></pre><h4 id="First_we_can_download_the_TexturePacker_and_PhysicsEditor_like:">First we can download the TexturePacker and PhysicsEditor like:</h4>
<p><img src="/img/te/bundle-icon-450-450.png" alt="Bundle"> </p>
<h4 id="Then_do_install_the_two_magic_tool:">Then do install the two magic tool:</h4>
<p><img src="/img/te/TP_logo_512.png" alt="TP" width="150"><br><img src="/img/te/PE_logo_512.png" alt="PE" width="150"></p>
<h4 id="About_TexturePacker:">About TexturePacker:</h4>
<p><img src="/img/te/TP_features.jpg" alt="ATP"><br><img src="/img/te/TP_teaser.jpg" alt="ATP"></p>
<h4 id="About_PhysicsEditor:">About PhysicsEditor:</h4>
<p><img src="/img/te/PE_features.jpg" alt="APE"><br><img src="/img/te/PE_teaser.jpg" alt="APE"></p>
<p>That’s not all! Go find it out!</p>
<hr>
<p>Dear Strong Walter,</p>
<p>you requested licenses for TexturePacker and PhysicsEditor.</p>
<p>Here’s your license key for TexturePacker:</p>
<pre><code>    <span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>
</code></pre><p>The license key for PhysicsEditor is attached.</p>
<p>Have fun with the license.</p>
<p>We would be happy if you would write blog post about our tools in return.<br>You can download additional screenshots and information from <a href="http://www.codeandweb.com/press-kit" target="_blank" rel="external">http://www.codeandweb.com/press-kit</a></p>
<p>Let us know if you write a tutorial or review - we might link back from our<br> tutorials page on www.codeandweb.com/texturepacker/tutorials</p>
<p>Kind regards<br>Andres Loew</p>
<p>Watch our game developer videos on YouTube:<br><a href="https://www.youtube.com/watch?v=crrFUYabm6E" target="_blank" rel="external">https://www.youtube.com/watch?v=crrFUYabm6E</a> - SpriteSheets - Essential facts every game developer should know<br><a href="https://www.youtube.com/watch?v=_KyUqyS5MLA" target="_blank" rel="external">https://www.youtube.com/watch?v=_KyUqyS5MLA</a> - SpriteSheets - Increasing your game’s performance</p>
<hr>
<p>CodeAndWeb GmbH | Geschaeftsfuehrer / CEO Andreas Loew | Saalbaustrasse 61, 89233 Neu-Ulm, Germany<br>Amtsgericht Memmingen, HRB 15791 | USt-IdNr.: DE293067323 | www.codeandweb.com | @codeandweb | +49 731 97735320</p>
]]></content>
    <summary type="html"><![CDATA[<h3 id="Thanks_goes_first_here-">Thanks goes first here.</h3>
<p>终于申请到了TexturePacker的license，虽然中间有点曲折，但是还是被热心的Andres Loew或者是他的同事们解决了，第二天很快就收到了LICENSE。<br>虽然才接触这类技术，但是作为一个CODER时常对新事物保持好奇心是相当有趣的。一起窥探动态的世界吧 哈哈</p>
<p><img src="/img/te/Pixel Guy Juggling.png" alt="Pixel Guy"><br>  ]]></summary>
    
      <category term="TexturePacker" scheme="http://modernsick.github.io/tags/TexturePacker/"/>
    
      <category term="Development" scheme="http://modernsick.github.io/categories/Development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Motio-Home]]></title>
    <link href="http://modernsick.github.io/2014-07-26-Wiki-Motio-Home.html"/>
    <id>http://modernsick.github.io/2014-07-26-Wiki-Motio-Home.html</id>
    <published>2014-07-27T00:22:42.000Z</published>
    <updated>2014-08-15T19:55:13.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Home_English_Version"><a href="https://github.com/Darsain/motio/wiki/Home" target="_blank" rel="external">Home English Version</a></h3>
<hr>
<h3 id="Markup"><a href="/2014-07-26-Wiki-Motio-Markup.html">Markup</a></h3>
<p>HTML/CSS应该是什么样的。</p>
<h3 id="Calling"><a href="/2014-07-26-Wiki-Motio-Calling.html">Calling</a></h3>
<p><a id="more"></a><br>如何通过 <strong><code>Motio</code></strong> 类型或者jQuery代理来调用Motio。</p>
<h3 id="Options"><a href="/2014-07-26-Wiki-Motio-Options.html">Options</a></h3>
<p>所有属性的详细描述。</p>
<h3 id="Properties"><a href="/2014-07-26-Wiki-Motio-Properties.html">Properties</a></h3>
<p>所有可用的Motio实例属性。</p>
<h3 id="Methods"><a href="/2014-07-26-Wiki-Motio-Methods.html">Methods</a></h3>
<p>Motio一些可调用的方法。</p>
<h3 id="Events"><a href="/2014-07-26-Wiki-Motio-Events.html">Events</a></h3>
<p>Motio可以触发的所有事件以及如何给这些事件注册回调函数。</p>
]]></content>
    <summary type="html"><![CDATA[<h3 id="Home_English_Version"><a href="https://github.com/Darsain/motio/wiki/Home" target="_blank" rel="external">Home English Version</a></h3>
<hr>
<h3 id="Markup"><a href="/2014-07-26-Wiki-Motio-Markup.html">Markup</a></h3>
<p>HTML/CSS应该是什么样的。</p>
<h3 id="Calling"><a href="/2014-07-26-Wiki-Motio-Calling.html">Calling</a></h3>
<p>]]></summary>
    
      <category term="Wiki" scheme="http://modernsick.github.io/tags/Wiki/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/tags/Translation/"/>
    
      <category term="Motio" scheme="http://modernsick.github.io/tags/Motio/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/categories/Translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Motio-Properties]]></title>
    <link href="http://modernsick.github.io/2014-07-26-Wiki-Motio-Properties.html"/>
    <id>http://modernsick.github.io/2014-07-26-Wiki-Motio-Properties.html</id>
    <published>2014-07-27T00:06:42.000Z</published>
    <updated>2014-08-15T19:56:06.000Z</updated>
    <content type="html"><![CDATA[<p><a href="Motio-Home.html">Home Chinese</a></p>
<h2 id="Properties_English_Version"><a href="https://github.com/Darsain/motio/wiki/Properties" target="_blank" rel="external">Properties English Version</a></h2>
<p>Motio对象拥有一些有用的属性。假设：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> motio = <span class="keyword">new</span> Motio(frame, options);</div></pre></td></tr></table></figure>

<p><a id="more"></a></p>
<h1 id="Properties"><strong>Properties</strong></h1>
<h3 id="motio-element"><strong>motio.element</strong></h3>
<p>Type: <code>Object</code></p>
<p>Motio正在操作的页面元素。</p>
<h3 id="motio-options"><strong>motio.options</strong></h3>
<p>Type: <code>Object</code></p>
<p>当前在操作的Motio对象的所有属性值。它基本上是在 <strong><code>Motio.defaults</code></strong>加上初始化Motio <strong><code>new Motio()</code></strong>时传进去的属性的并集。</p>
<h3 id="motio-width"><strong>motio.width</strong></h3>
<p>Type: <code>Integer</code></p>
<p>一帧动画的宽度。它的值不会改变，所以如果你在 <strong><code>body</code></strong> 元素上设置了panning animation，然后改变这个窗口的大小时也不会影响它的宽度值。不过你也不会在panning模式的动画里面需要用到这个属性。</p>
<h3 id="motio-height"><strong>motio.height</strong></h3>
<p>Type: <code>Integer</code></p>
<p>一帧动画的高度。它的值不会改变，所以如果你在 <strong><code>body</code></strong> 元素上设置了panning animation，然后改变这个窗口的大小时也不会影响它的宽度值。不过你也不会在panning模式的动画里面需要用到这个属性。</p>
<h3 id="motio-isPaused"><strong>motio.isPaused</strong></h3>
<p>Type: <code>Boolean</code></p>
<p>当Motio被暂停之后这个属性值便是 <strong><code>true</code></strong> ，否则为 <strong><code>false</code></strong> 。</p>
<h2 id="Panning_mode_specific_properties"><strong>Panning mode specific properties</strong></h2>
<h3 id="motio-pos"><strong>motio.pos</strong></h3>
<p>Type: <code>Object</code></p>
<p>背景位置对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">	x: <span class="number">100</span>, <span class="comment">// Horizontal background position.</span></div><div class="line">	y: <span class="number">100</span>  <span class="comment">// Vertical background position.</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="Sprite_mode_specific_properties"><strong>Sprite mode specific properties</strong></h2>
<h3 id="motio-frame"><strong>motio.frame</strong></h3>
<p>Type: <code>Integer</code></p>
<p>当前被激活的帧的index。</p>
<h3 id="motio-frames"><strong>motio.frames</strong></h3>
<p>Type: <code>Integer</code></p>
<p>当前活动动画一共的帧数。</p>
]]></content>
    <summary type="html"><![CDATA[<p><a href="Motio-Home.html">Home Chinese</a></p>
<h2 id="Properties_English_Version"><a href="https://github.com/Darsain/motio/wiki/Properties" target="_blank" rel="external">Properties English Version</a></h2>
<p>Motio对象拥有一些有用的属性。假设：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> motio = <span class="keyword">new</span> Motio(frame, options);</div></pre></td></tr></table></figure>

<p>]]></summary>
    
      <category term="Wiki" scheme="http://modernsick.github.io/tags/Wiki/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/tags/Translation/"/>
    
      <category term="Motio" scheme="http://modernsick.github.io/tags/Motio/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/categories/Translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Motio-Options]]></title>
    <link href="http://modernsick.github.io/2014-07-26-Wiki-Motio-Options.html"/>
    <id>http://modernsick.github.io/2014-07-26-Wiki-Motio-Options.html</id>
    <published>2014-07-26T22:41:42.000Z</published>
    <updated>2014-08-15T19:55:57.000Z</updated>
    <content type="html"><![CDATA[<p><a href="Motio-Home.html">Home Chinese</a></p>
<h2 id="Options_English_Version"><a href="https://github.com/Darsain/motio/wiki/Options" target="_blank" rel="external">Options English Version</a></h2>
<p>所有的默认值都存放在<strong><code>Motio.defaults</code></strong> 这个对象里。 你可以方便的设置它的默认值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Motio.defaults.fps = <span class="number">60</span>;</div></pre></td></tr></table></figure>

<p>默认情况下Motio的所有特性都被设置为为启用的。用默认值来初始化一个Motio对象你会得到一个静止的什么都干的动画。<br><a id="more"></a></p>
<h2 id="Quick_reference"><strong>Quick reference</strong></h2>
<p>Motio对象的所有默认值都在下面这段源码中保存：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> panning = <span class="keyword">new</span> Motio(element, {</div><div class="line">  fps:      <span class="number">15</span>, <span class="comment">// Frames per second.</span></div><div class="line">	<span class="comment">// Sprite animation specific options</span></div><div class="line">  frames:   <span class="number">0</span>, <span class="comment">// Number of frames in sprite.</span></div><div class="line">  vertical: <span class="number">0</span>, <span class="comment">// Tells Motio that you are using vertically stacked sprite image.</span></div><div class="line">  width:    <span class="number">0</span>, <span class="comment">// Set the frame width manually (optional).</span></div><div class="line">  height:   <span class="number">0</span>, <span class="comment">// Set the frame height manually (optional).</span></div><div class="line"></div><div class="line">  <span class="comment">// Panning specific options</span></div><div class="line">  speedX:   <span class="number">0</span>, <span class="comment">// Horizontal panning speed in pixels per second.</span></div><div class="line">  speedY:   <span class="number">0</span>, <span class="comment">// Vertical panning speed in pixels per second.</span></div><div class="line">  bgWidth:  <span class="number">0</span>, <span class="comment">// Width of the background image (optional).</span></div><div class="line">  bgHeight: <span class="number">0</span>  <span class="comment">// Height of the background image (optional).</span></div><div class="line">});</div></pre></td></tr></table></figure>

<h1 id="Options"><strong>Options</strong></h1>
<hr>
<h3 id="fps"><strong>fps</strong></h3>
<p>Type: <code>Int</code><br>Default: <code>15</code></p>
<p>每秒钟播放几帧动画。 更大的数字意味着更流畅的画面，但需要消耗更多的CPU资源。 最大值是60。</p>
<p><em>这个属性可以动态的通过 <strong><code>.set()</code></strong> 方法来设置。</em></p>
<h2 id="Sprite_animation_模式下特有的属性"><strong>Sprite animation 模式下特有的属性</strong></h2>
<h3 id="frames"><strong>frames</strong></h3>
<p>Type: <code>Integer</code><br>Default: <code>null</code></p>
<p>在一个系列动画图片中，一个动作由几帧自图片完成。设置的这个属性就意味着启用了Sprite Based 模式的动画。否则Motio就处于Panning Based模式。</p>
<h3 id="vertical"><strong>vertical</strong></h3>
<p>Type: <code>Boolean</code><br>Default: <code>false</code></p>
<p>告诉Motio你在使用纵向的动画子图片，即动作的每一帧是由图片从上往下来进行的。</p>
<h3 id="width"><strong>width</strong></h3>
<p>Type: <code>Integer</code><br>Default: <code>0</code></p>
<p>手动的设置每一帧动画的宽度。这个属性是完全可选的，因为Motio会自动为你计算出这个值，但是如果你要设置Motio动画的这个元素是隐藏的，那Motio就计算不出来了。这样的话，你就得使用这个属性来帮助Motion设置正确的值。</p>
<h3 id="height"><strong>height</strong></h3>
<p>Type: <code>Integer</code><br>Default: <code>0</code></p>
<p>手动的设置每一帧动画的高度。这个属性是完全可选的，因为Motio会自动为你计算出这个值，但是如果你要设置Motio动画的这个元素是隐藏的，那Motio就计算不出来了。这样的话，你就得使用这个属性来帮助Motion设置正确的值。</p>
<h2 id="Panning_模式下特有的属性"><strong>Panning 模式下特有的属性</strong></h2>
<h3 id="speedX"><strong>speedX</strong></h3>
<p>Type: <code>Integer</code><br>Default: <code>null</code></p>
<p>水平方向上每秒钟动画移动的像素值。使用负值可以是元素倒退。</p>
<p><em>这个属性可以动态的通过 <strong><code>.set()</code></strong> 方法来设置。</em></p>
<h3 id="speedY"><strong>speedY</strong></h3>
<p>Type: <code>Integer</code><br>Default: <code>null</code></p>
<p>垂直方向上每秒钟动画移动的像素值。使用负值可以是元素倒退。</p>
<p><em>这个属性可以动态的通过 <strong><code>.set()</code></strong> 方法来设置。</em></p>
<h3 id="bgWidth"><strong>bgWidth</strong></h3>
<p>Type: <code>Integer</code><br>Default: <code>null</code></p>
<p>用来平移的背景图片的宽度。这个属性是可选择的。</p>
<p>Motio需要知道这个值和 <strong><code>bgHeight</code></strong> 这两个属性来计算什么时候将背景图片复位到 <strong><code>0</code></strong> ，并且也不会溢出Javascript对Integer 2^53的限制。默认不设置的话，它的位置会顺延到一个很可笑的数值，就导致几百万年之后产生一个疯子一样的动画…如果你有强迫症的话你可以去自由设定它们的值。</p>
<h3 id="bgHeight"><strong>bgHeight</strong></h3>
<p>Type: <code>Integer</code><br>Default: <code>null</code></p>
<p>用来平移的背景图片的高度。这个属性是可选择的。</p>
<h2 id="jQuery_plugin_options"><strong>jQuery plugin options</strong></h2>
<p>这些属性只有在Motio对象是通过jQuery插件来实例化的时候才有效。</p>
<h3 id="startPaused"><strong>startPaused</strong></h3>
<p>Type: <code>Boolean</code><br>Default: <code>0</code></p>
<p>默认的通过jQuery实例化的Motio动画是自动启动的，可以设置这个值为 <strong><code>true</code></strong> 来阻止它自动启动。<br>By default, initiating via a jQuery plugin automatically starts the animation. Passing <code>true</code> into this value will prohibit that.</p>
]]></content>
    <summary type="html"><![CDATA[<p><a href="Motio-Home.html">Home Chinese</a></p>
<h2 id="Options_English_Version"><a href="https://github.com/Darsain/motio/wiki/Options" target="_blank" rel="external">Options English Version</a></h2>
<p>所有的默认值都存放在<strong><code>Motio.defaults</code></strong> 这个对象里。 你可以方便的设置它的默认值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Motio.defaults.fps = <span class="number">60</span>;</div></pre></td></tr></table></figure>

<p>默认情况下Motio的所有特性都被设置为为启用的。用默认值来初始化一个Motio对象你会得到一个静止的什么都干的动画。<br>]]></summary>
    
      <category term="Wiki" scheme="http://modernsick.github.io/tags/Wiki/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/tags/Translation/"/>
    
      <category term="Motio" scheme="http://modernsick.github.io/tags/Motio/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/categories/Translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Motio-Methods]]></title>
    <link href="http://modernsick.github.io/2014-07-26-Wiki-Motio-Methods.html"/>
    <id>http://modernsick.github.io/2014-07-26-Wiki-Motio-Methods.html</id>
    <published>2014-07-26T20:28:42.000Z</published>
    <updated>2014-08-15T19:55:47.000Z</updated>
    <content type="html"><![CDATA[<p><a href="Motio-Home.html">Home Chinese</a></p>
<h2 id="Methods_English_Version"><a href="https://github.com/Darsain/motio/wiki/Methods" target="_blank" rel="external">Methods English Version</a></h2>
<p>Motio拥有非常方便且使用的方法。你可以通过一个<a href="https://github.com/Darsain/motio/wiki/Calling" target="_blank" rel="external"><strong><code>new Motio</code></strong></a>来直接调用它们。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> motio = <span class="keyword">new</span> Motio(frame, options);</div><div class="line"><span class="comment">// Play method call</span></div><div class="line">motio.play();</div></pre></td></tr></table></figure>

<p><a id="more"></a><br>在不设置或者调用特殊方法的情况下，Motio的每次调用都会返回它本身，这样你如果你愿意的话就可以进行链式编程调用了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">motio.on(<span class="string">'frame'</span>, callback).set(<span class="string">'speedX'</span>, <span class="number">50</span>).play();</div></pre></td></tr></table></figure>

<h4 id="通过jQuery代理来调用Motio方法"><strong>通过jQuery代理来调用Motio方法</strong></h4>
<p>如果你在使用Motio的jQuery版本插件的话，你还可以像如下演示一样通过jQuery代理对象来进行调用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#frame'</span>).motio(<span class="string">'methodName'</span> [, <span class="built_in">arguments</span>... ] );</div></pre></td></tr></table></figure>

<p>假设已经有一个Motio对象与<strong><code>$(&#39;#frame&#39;)</code></strong>进行了关联。这种关联是通过<a href="https://github.com/Darsain/motio/wiki/Calling#calling-via-jquery-plugin" target="_blank" rel="external">jQuery插件来调用Motio</a>的时候发生的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#frame'</span>).motio(<span class="string">'toEnd'</span>, callbackFunction);</div></pre></td></tr></table></figure>

<h2 id="Methods"><strong>Methods</strong></h2>
<h3 id="play"><strong>play</strong></h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">motio.play( [ reverse ] );</div></pre></td></tr></table></figure>

<p>启动一个只有被另外操作才能打断的持续播放的动画。</p>
<ul>
<li><strong>reverse:</strong> <code>Boolean</code> 传入<strong><code>true</code></strong>值可以使动画按照反方向进行播放。</li>
</ul>
<p><strong><code>reverse</code></strong>树形只在Sprite Based模式下的动画才会起作用。而panning animation的方向是通过传入一个正数或者一个负数设置<strong><code>speeX</code></strong> 或者是 <strong><code>speedY</code></strong> 来控制的。</p>
<h3 id="暂停_pause"><strong>暂停 pause</strong></h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">motio.pause();</div></pre></td></tr></table></figure>

<p>暂停当前在播放的动画。</p>
<h3 id="交替_toggle"><strong>交替 toggle</strong></h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">motio.toggle();</div></pre></td></tr></table></figure>

<p>当前状态为播放便暂停，反之…</p>
<h3 id="toStart"><strong>toStart</strong></h3>
<p><em>仅仅在sprite animation模式下起作用</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">motio.toStart([immediate][,callback])</div></pre></td></tr></table></figure>

<p>将动画置于第一帧，并且暂停动画。如果第一帧已经被激活，那么动画将会从最后一帧开始重复播放这个动画。</p>
<ul>
<li><strong>immediate</strong> <code>Boolean</code> 是否直接激活动画的最后一帧，并且略过这个动画。</li>
<li><strong>callback</strong> <code>Function</code> 当动画执行到最后一帧之后要执行的回调函数。</li>
</ul>
<p>如果在中途这个动画被中断了，那么这个 回调函数就不会被执行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">motio.toStart(<span class="literal">true</span>); <span class="comment">// Activate first frame immediately without animation.</span></div><div class="line">motio.toStart(callback); <span class="comment">// Execute callback when animation reaches the destination.</span></div><div class="line">motio.toStart(<span class="literal">true</span>, callback); <span class="comment">// Combination of both arguments.</span></div></pre></td></tr></table></figure>

<h3 id="toEnd"><strong>toEnd</strong></h3>
<p><em>仅仅在sprite animation模式下起作用</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">motio.toEnd([immediate][,callback])</div></pre></td></tr></table></figure>

<p>将动画置于最后一帧，并且暂停动画。如果最后一帧动画已经被激活，那么将会从第一帧开始重复播放动画。</p>
<ul>
<li><strong>immediate</strong> <code>Boolean</code> 是否直接激活动画的最后一帧，并且略过这个动画。</li>
<li><strong>callback</strong> <code>Function</code> 当动画执行到最后一帧之后要执行的回调函数。</li>
</ul>
<p>如果在中途这个动画被中断了，那么这个 回调函数就不会被执行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">motio.toEnd(<span class="literal">true</span>); <span class="comment">// Activate last frame immediately without animation.</span></div><div class="line">motio.toEnd(callback); <span class="comment">// Execute callback when animation reaches the destination.</span></div><div class="line">motio.toEnd(<span class="literal">true</span>, callback); <span class="comment">// Combination of both arguments.</span></div></pre></td></tr></table></figure>

<h3 id="to"><strong>to</strong></h3>
<p><em>仅仅在sprite animation模式下起作用</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">motio.to( frame, [ immediate ] [, callback] );</div></pre></td></tr></table></figure>



<p>让动画执行到指定的帧数，并且暂停动画。</p>
<ul>
<li><strong>frame</strong> <code>Integer</code> 要执行到的目标帧数，从<code>0</code>开始</li>
<li><strong>immediate</strong> <code>Boolean</code> 是否里面执行到最后一帧，并且跳过动画。</li>
<li><strong>callback</strong> <code>Function</code> 当动画执行到最后一帧之后要执行的回调函数。</li>
</ul>
<p>如果在中途这个动画被中断了，那么这个 回调函数就不会被执行。</p>
<p>如果要跳到的那一帧即是当前被激活的这一帧，那么动画会暂停，并且立马执行回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">motio.to(<span class="number">2</span>, <span class="literal">true</span>); <span class="comment">// Activate 3rd frame immediately without animation.</span></div><div class="line">motio.to(<span class="number">2</span>, callback); <span class="comment">// Execute callback when animation reaches the 3rd frame.</span></div><div class="line">motio.to(<span class="number">2</span>, <span class="literal">true</span>, callback); <span class="comment">// Combination of both arguments.</span></div></pre></td></tr></table></figure>

<h3 id="set"><strong>set</strong></h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">motio.set(name.value);</div></pre></td></tr></table></figure>

<p>设置指定属性到指定的值。</p>
<ul>
<li><strong>name</strong> <code>String</code> 要设置的属性名称</li>
<li><strong>value</strong> <code>Mixed</code> 要 设置的新的属性值</li>
</ul>
<p>只有如下的几个树形可以进行动态设置：</p>
<ul>
<li>fps</li>
<li>speedX</li>
<li>speedY</li>
</ul>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">motio.set(<span class="string">'speedX'</span>,<span class="number">10</span>);</div></pre></td></tr></table></figure>

<h3 id="on"><strong>on</strong></h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">motio.set(eventName.callback);</div></pre></td></tr></table></figure>



<p>为单个或者多个Motio事件设置回调函数。所有可以注册的事件，以及事件接受的参数都可以在这里找到： <a href="https://github.com/Darsain/motio/wiki/Events" target="_blank" rel="external">Events documentation</a>。</p>
<ul>
<li><strong>eventName</strong> <code>Mixed</code>  事件的名称，或者是回调函数的Map对象</li>
<li><strong>callback</strong> <code>Mixed</code> 单个回调方法，或者是回调函数数组</li>
</ul>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Basic usage</span></div><div class="line">motio.on(<span class="string">'frame'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{});</div><div class="line"></div><div class="line"><span class="comment">// Multiple events, one callback</span></div><div class="line">motio.on(<span class="string">'play pause'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{});</div><div class="line"></div><div class="line"><span class="comment">// Multiple callbacks for multiple events</span></div><div class="line">motio.on(<span class="string">'play pause'</span>, [</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{},</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{}</div><div class="line">]);</div><div class="line"></div><div class="line"><span class="comment">// Callback map object</span></div><div class="line">motio.on({</div><div class="line">	play: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{},</div><div class="line">	frame: [</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{},</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{}</div><div class="line">	]</div><div class="line">});</div></pre></td></tr></table></figure>



<h3 id="off"><strong>off</strong></h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">motio.off(eventName[.callback]);</div></pre></td></tr></table></figure>

<p>去掉某个事件的一个、多个或者是全部回调函数。</p>
<ul>
<li><strong>eventName</strong> <code>Mixed</code>  事件的名称</li>
<li><strong>callback</strong> <code>Mixed</code> 单个要移除回调方法，或者是回调函数数组，默认是全部清除</li>
</ul>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Removes one callback from load event</span></div><div class="line">motio.off(<span class="string">'load'</span>, fn1);</div><div class="line"></div><div class="line"><span class="comment">// Removes one callback from multiple events</span></div><div class="line">motio.off(<span class="string">'load move'</span>, fn1);</div><div class="line"></div><div class="line"><span class="comment">// Removes multiple callbacks from multiple event</span></div><div class="line">motio.off(<span class="string">'load move'</span>, [ fn1, fn2 ]);</div><div class="line"></div><div class="line"><span class="comment">// Removes all callbacks from load event</span></div><div class="line">motio.off(<span class="string">'load'</span>);</div></pre></td></tr></table></figure>

<h3 id="destroy"><strong>destroy</strong></h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">motio.destroy();</div></pre></td></tr></table></figure>

<p>暂停动画，并且将元素的背景图片位置设置到 <code>0 0</code>的位置。</p>
]]></content>
    <summary type="html"><![CDATA[<p><a href="Motio-Home.html">Home Chinese</a></p>
<h2 id="Methods_English_Version"><a href="https://github.com/Darsain/motio/wiki/Methods" target="_blank" rel="external">Methods English Version</a></h2>
<p>Motio拥有非常方便且使用的方法。你可以通过一个<a href="https://github.com/Darsain/motio/wiki/Calling" target="_blank" rel="external"><strong><code>new Motio</code></strong></a>来直接调用它们。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> motio = <span class="keyword">new</span> Motio(frame, options);</div><div class="line"><span class="comment">// Play method call</span></div><div class="line">motio.play();</div></pre></td></tr></table></figure>

<p>]]></summary>
    
      <category term="Wiki" scheme="http://modernsick.github.io/tags/Wiki/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/tags/Translation/"/>
    
      <category term="Motio" scheme="http://modernsick.github.io/tags/Motio/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/categories/Translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Motio-Markup]]></title>
    <link href="http://modernsick.github.io/2014-07-26-Wiki-Motio-Markup.html"/>
    <id>http://modernsick.github.io/2014-07-26-Wiki-Motio-Markup.html</id>
    <published>2014-07-26T18:31:19.000Z</published>
    <updated>2014-08-15T19:55:38.000Z</updated>
    <content type="html"><![CDATA[<p><a href="Motio-Home.html">Home Chinese</a></p>
<h2 id="Markup_English_Version"><a href="https://github.com/Darsain/motio/wiki/Markup" target="_blank" rel="external">Markup English Version</a></h2>
<p>Motio通过改变传进来的元素的<strong><code>background-position</code></strong>来实现动画效果。背景图片可以是一张无缝的整体图片（panning animation）或者也可以是一张有连续动作的静态帧图片（sprite based animation）。</p>
<h3 id="例如：">例如：</h3>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"panning"</span> <span class="attribute">class</span>=<span class="value">"panning"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"sprite"</span> <span class="attribute">class</span>=<span class="value">"sprite"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p><a id="more"></a><br>背景图片的尺寸可以通过定义样式文件来设置。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.panning {</div><div class="line">	width: auto; // Span to the full width of container</div><div class="line">	height: 300px;</div><div class="line">	background: url('repeating_sky.jpg');</div><div class="line">}</div><div class="line"></div><div class="line">.sprite {</div><div class="line">	width: 256px; // Width of one animation frame</div><div class="line">	height: 256px; // Height of one animation frame</div><div class="line">	background: url('animation_frames_sprite.png');</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后Motio通过下面的方式来调用动画：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Panning</span></div><div class="line"><span class="keyword">var</span> panning = <span class="keyword">new</span> Motio(<span class="built_in">document</span>.getElementById(<span class="string">'panning'</span>), {</div><div class="line">	fps: <span class="number">30</span>, <span class="comment">// Frames per second. More fps = higher CPU load.</span></div><div class="line">	speedX: -<span class="number">30</span> <span class="comment">// Negative horizontal speed = panning to left.</span></div><div class="line">});</div><div class="line">panning.play(); <span class="comment">// Start playing animation</span></div><div class="line"></div><div class="line"><span class="comment">// Sprite</span></div><div class="line"><span class="keyword">var</span> sprite = <span class="keyword">new</span> Motio(<span class="built_in">document</span>.getElementById(<span class="string">'sprite'</span>), {</div><div class="line">	fps: <span class="number">10</span>, <span class="comment">// Frames per second. More fps = higher CPU load.</span></div><div class="line">	frames: <span class="number">14</span> <span class="comment">// Number of animation frames in sprite</span></div><div class="line">});</div><div class="line">sprite.play(); <span class="comment">// Start playing animation</span></div></pre></td></tr></table></figure>

<p>当设置了<strong><code>frames</code></strong>属性之后Motio就知道要使用的动画是基于子画面切换的（sprite based）</p>
<p>通过jQuery代理来调用Motio动画是不需要在初始化的时候设置调用<strong><code>.play()</code></strong> 方法的。<br>在上面的例子中Motio是在调用<strong><code>new Motio</code></strong> 实例化之后自动进行的初始化操作。Motio会假设你仅仅是使用jQuery插件来初始化动画然后就没有然后了。即使可以通过jQuery代理来调用方法或者是操作动画，那也看起来没意义啊。已经有了<strong><code>new Motio</code></strong>，为什么还要去拿到所有元素的代理对象呢？</p>
<p>想知道更多关于方法和属性或者其他所有信息看这里 <a href="https://github.com/Darsain/motio/wiki" target="_blank" rel="external">RTFM</a>。</p>
<h2 id="平移_Panning"><strong>平移 Panning</strong></h2>
<p>对于平移模式的动画来说，没有任何的规则，只需要给元素设置一个背景，然后将元素传给Motio就OK了。</p>
<h2 id="子画面？_Sprite（不会翻译哦，求指教）"><strong>子画面？ Sprite</strong>（不会翻译哦，求指教）</h2>
<p>如果想要一副可以正确播放的Sprite based动画，你必须设置你的背景图片的每一格画面都是等大小的。例如：</p>
<p><img src="http://i.imgur.com/Sazfe0Q.png"></p>
<p>这就意味着你要放置动画的的宽度和长度，必须和背景图片中的单个子画面的宽度和长度一样一样的。元素的长宽你可以通过样式文件来设置。你可以设置<strong><code>padding</code></strong>、<strong><code>margin</code></strong>、<strong><code>border</code></strong>，只要你设置的<strong><code>border-box</code></strong>的尺寸和背景图片的单个子画面尺寸一样，Motio就可以照常工作。唯一会导致Motio不正常工作的操作就是改变背景图片的<strong><code>background-origin</code></strong>属性，所以千万别碰它。</p>
<p>同时调用隐藏起来的元素去执行Motio动画是不会成功的，因为Motio都没办法获取元素的尺寸。这种情况下可以通过设置 <a href="https://github.com/Darsain/motio/wiki/Options#width" target="_blank" rel="external"><code>width</code></a> &amp; <a href="https://github.com/Darsain/motio/wiki/Options#height" target="_blank" rel="external"><code>height</code></a> 属性来手动进行操作。</p>
]]></content>
    <summary type="html"><![CDATA[<p><a href="Motio-Home.html">Home Chinese</a></p>
<h2 id="Markup_English_Version"><a href="https://github.com/Darsain/motio/wiki/Markup" target="_blank" rel="external">Markup English Version</a></h2>
<p>Motio通过改变传进来的元素的<strong><code>background-position</code></strong>来实现动画效果。背景图片可以是一张无缝的整体图片（panning animation）或者也可以是一张有连续动作的静态帧图片（sprite based animation）。</p>
<h3 id="例如：">例如：</h3>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"panning"</span> <span class="attribute">class</span>=<span class="value">"panning"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"sprite"</span> <span class="attribute">class</span>=<span class="value">"sprite"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p>]]></summary>
    
      <category term="Wiki" scheme="http://modernsick.github.io/tags/Wiki/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/tags/Translation/"/>
    
      <category term="Motio" scheme="http://modernsick.github.io/tags/Motio/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/categories/Translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Motio-Events]]></title>
    <link href="http://modernsick.github.io/2014-07-26-Wiki-Motio-Events.html"/>
    <id>http://modernsick.github.io/2014-07-26-Wiki-Motio-Events.html</id>
    <published>2014-07-26T17:56:41.000Z</published>
    <updated>2014-08-15T19:54:52.000Z</updated>
    <content type="html"><![CDATA[<p><a href="Motio-Home.html">Home Chinese</a></p>
<h2 id="Events_English_Version"><a href="https://github.com/Darsain/motio/wiki/Events" target="_blank" rel="external">Events English Version</a></h2>
<p>你可以用<strong><code>.on()</code></strong>和<strong><code>off()</code></strong>方法为Motio注册回调函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> motio = <span class="keyword">new</span> Motio(frame, options);</div><div class="line"><span class="comment">// Register a callback to multiple events</span></div><div class="line">motio.on(<span class="string">'play pause'</span>, fn);</div><div class="line"><span class="comment">// Start playing the animation</span></div><div class="line">motio.play();</div></pre></td></tr></table></figure>

<p><a id="more"></a><br>可以在 <a href="https://github.com/Darsain/motio/wiki/Methods#on" target="_blank" rel="external">on &amp; off methods documentation</a>找到更多的使用方法。</p>
<h2 id="一般性参数">一般性参数</h2>
<h3 id="this"><strong>this</strong></h3>
<p>在所有回调函数中的<strong><code>this</code></strong>变量就是触发事件的Motio对象本身。通过这个变量你可以访问到Motio中的所有<a href="https://github.com/Darsain/motio/wiki/Properties" target="_blank" rel="external">属性</a></p>
<h4 id="第一个参数"><strong>第一个参数</strong></h4>
<p>所有回调函数接受的第一个参数都是触发事件的名字。</p>
<hr>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">motio.on(<span class="string">'frame'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(eventName)</span> </span>{</div><div class="line">	<span class="built_in">console</span>.log(eventName); <span class="comment">// 'frame'</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.frame); <span class="comment">// frame index</span></div><div class="line">});</div></pre></td></tr></table></figure>

<h2 id="事件"><strong>事件</strong></h2>
<h3 id="暂停_pause"><strong>暂停 pause</strong></h3>
<p>当动画暂停的时候触发此事件。</p>
<h3 id="播放_play"><strong>播放 play</strong></h3>
<p>当动画重新播放的时候触发此事件。</p>
<h4 id="帧切换_frame"><strong>帧切换 frame</strong></h4>
<p>当每一帧动画切换时触发此事件。</p>
]]></content>
    <summary type="html"><![CDATA[<p><a href="Motio-Home.html">Home Chinese</a></p>
<h2 id="Events_English_Version"><a href="https://github.com/Darsain/motio/wiki/Events" target="_blank" rel="external">Events English Version</a></h2>
<p>你可以用<strong><code>.on()</code></strong>和<strong><code>off()</code></strong>方法为Motio注册回调函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> motio = <span class="keyword">new</span> Motio(frame, options);</div><div class="line"><span class="comment">// Register a callback to multiple events</span></div><div class="line">motio.on(<span class="string">'play pause'</span>, fn);</div><div class="line"><span class="comment">// Start playing the animation</span></div><div class="line">motio.play();</div></pre></td></tr></table></figure>

<p>]]></summary>
    
      <category term="Wiki" scheme="http://modernsick.github.io/tags/Wiki/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/tags/Translation/"/>
    
      <category term="Motio" scheme="http://modernsick.github.io/tags/Motio/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/categories/Translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Motio-Calling]]></title>
    <link href="http://modernsick.github.io/2014-07-26-Wiki-Motio-Calling.html"/>
    <id>http://modernsick.github.io/2014-07-26-Wiki-Motio-Calling.html</id>
    <published>2014-07-26T07:05:39.000Z</published>
    <updated>2014-08-15T19:55:05.000Z</updated>
    <content type="html"><![CDATA[<p><a href="Motio-Home.html">Home Chinese</a></p>
<h2 id="Calling_English_Version"><a href="https://github.com/Darsain/motio/wiki/Calling" target="_blank" rel="external">Calling English Version</a></h2>
<h2 id="创建一个全新的Motio对象">创建一个全新的Motio对象</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> motio = <span class="keyword">new</span> Motio( frame [, options ] );</div></pre></td></tr></table></figure>



<p>这样就实例化了一个可以马上使用的Motio对象。当你新实例化一个Motio对象之后，它的所有特性都是没有启用的，所以调用一个所有属性都是默认值的Motio对象你会得到一张什么也做不了的静态帧。<br><a id="more"></a><br>新创建的Motio对象也是暂停状态的，所以如果你想立刻启动这个动画，那么你必须在创建好之后去调用<strong>‘.play()’</strong>这个方法。</p>
<p>所有可调用的方法列表以及有效的相关文档可以在<a href="https://github.com/Darsain/motio/wiki/Methods" target="_blank" rel="external">Method Documentation</a>找到。</p>
<hr>
<a id="more"></a>

<h3 id="frame"><strong>frame</strong></h3>
<p>Type: <code>Element</code></p>
<p>有动画背景的Dom 元素。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> motio = <span class="keyword">new</span> Motio(<span class="built_in">document</span>.getElementById(<span class="string">'frame'</span>)); <span class="comment">// Native</span></div><div class="line"><span class="keyword">var</span> motio = <span class="keyword">new</span> Motio($(<span class="string">'#frame'</span>)[<span class="number">0</span>]); <span class="comment">// With jQuery</span></div></pre></td></tr></table></figure>

<h3 id="option"><strong>option</strong></h3>
<p>Type: <code>Object</code></p>
<p>配置有Motio特性的Javascript对象。所有属性文档可以在<a href="https://github.com/Darsain/sly/wiki/Options" target="_blank" rel="external">Options Documentation</a>找到。</p>
<h2 id="通过jQuery插件调用Motio"><strong>通过jQuery插件调用Motio</strong></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#frame'</span>).motio( [ options ] );</div></pre></td></tr></table></figure>



<p>通过jQuery插件初始化的Motio对象自动激活了动画，所以不需要在创建之后再去手动调用<strong>‘.play()’</strong>方法。同时也可以通过<strong><a href="https://github.com/Darsain/motio/wiki/Options#startpaused" target="_blank" rel="external">‘startPaused’</a></strong>属性来让它失效，即不再刚创建之后便启动动画。</p>
]]></content>
    <summary type="html"><![CDATA[<p><a href="Motio-Home.html">Home Chinese</a></p>
<h2 id="Calling_English_Version"><a href="https://github.com/Darsain/motio/wiki/Calling" target="_blank" rel="external">Calling English Version</a></h2>
<h2 id="创建一个全新的Motio对象">创建一个全新的Motio对象</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> motio = <span class="keyword">new</span> Motio( frame [, options ] );</div></pre></td></tr></table></figure>



<p>这样就实例化了一个可以马上使用的Motio对象。当你新实例化一个Motio对象之后，它的所有特性都是没有启用的，所以调用一个所有属性都是默认值的Motio对象你会得到一张什么也做不了的静态帧。<br><!--more--><br>新创建的Motio对象也是暂停状态的，所以如果你想立刻启动这个动画，那么你必须在创建好之后去调用<strong>‘.play()’</strong>这个方法。</p>
<p>所有可调用的方法列表以及有效的相关文档可以在<a href="https://github.com/Darsain/motio/wiki/Methods" target="_blank" rel="external">Method Documentation</a>找到。</p>
<hr>
]]></summary>
    
      <category term="Wiki" scheme="http://modernsick.github.io/tags/Wiki/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/tags/Translation/"/>
    
      <category term="Motio" scheme="http://modernsick.github.io/tags/Motio/"/>
    
      <category term="Translation" scheme="http://modernsick.github.io/categories/Translation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Site that is Useful]]></title>
    <link href="http://modernsick.github.io/2014-07-23-Useful-Sites.html"/>
    <id>http://modernsick.github.io/2014-07-23-Useful-Sites.html</id>
    <published>2014-07-24T20:33:57.000Z</published>
    <updated>2014-08-15T18:27:39.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://blog.jobbole.com/73744/" target="_blank" rel="external">Chrome 中能帮助我们开发的一些利器</a> <a href="http://code.tutsplus.com/tutorials/google-chrome-hegemony--cms-21478" target="_blank" rel="external">(外文连接)</a><br><a href="http://www.itjhwd.com/bmywdsq/" target="_blank" rel="external">除了编码，程序员还可以做的一些事情</a> <a href="http://www.programcreek.com/2012/10/8-things-programmers-can-do-at-weekends/" target="_blank" rel="external">(外文连接)</a><br><a href="http://snapsvg.io/" target="_blank" rel="external">Snap.svg</a><br><a href="http://darsa.in/motio" target="_blank" rel="external">Motio</a><br><a href="http://hubpages.com/hub/Getting-Accepted-in-Google-Adsense-and-Addressing-Causes-of-Rejections" target="_blank" rel="external">How to Finally Get Google Adsense Account Approved</a><br><a href="http://bluewhale.cc/2014-06-04/three-kinds-of-methods-visits-google-analytics.html" target="_blank" rel="external">三种方法访问Google Analytics</a><br><a href="http://blogtimenow.com/blogging/create-contact-page-blogger-add-contact-form-blogger/" target="_blank" rel="external">How to create contact page in Blogger – Add contact form for Blogger</a><br><a href="https://github.com/codeBelt/Example-TypeScript-Generate-Documentation" target="_blank" rel="external">Example TypeScript Generate Documentation</a><br><a href="http://octopress.org/" target="_blank" rel="external">octopress</a><br><a href="http://www.freehao123.com/heroku/" target="_blank" rel="external">Heroku</a><br><a href="http://blog.eddie.com.tw/2011/10/11/how-to-install-octopress-on-heroku/" target="_blank" rel="external">How to Install Octopress on Heroku</a><br><a href="http://www.tutorialrepublic.com/twitter-bootstrap-tutorial/bootstrap-lists.php" target="_blank" rel="external">BOOTSTRAP BASIC</a><br><a href="http://zespia.tw/blog/2012/10/11/hexo-debut/" target="_blank" rel="external">Hexo 颯爽登場！</a></p>
]]></content>
    
    
      <category term="Useful Site" scheme="http://modernsick.github.io/tags/Useful-Site/"/>
    
      <category term="Development" scheme="http://modernsick.github.io/categories/Development/"/>
    
  </entry>
  
</feed>
